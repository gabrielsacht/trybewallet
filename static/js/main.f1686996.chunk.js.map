{"version":3,"sources":["redux/actions/index.js","pages/Login.js","components/Header.js","components/WalletForm.js","components/Table.js","pages/Wallet.js","redux/reducers/user.js","redux/reducers/wallet.js","redux/reducers/index.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["deleteTask","task","type","Login","handleClick","props","history","saveUser","state","email","push","validate","pswd","password","split","console","log","test","length","valid","handleChange","bind","target","name","value","this","setState","id","className","htmlFor","data-testid","placeholder","onChange","required","minLength","onClick","disabled","Component","connect","dispatch","saveUserDataAction","Header","renderCash","expenses","saveCash","valuees","forEach","item","currency","valueTratado","exchangeRates","ask","toFixed","reduce","partialSum","a","Number","getCurrencies","cash","user","wallet","fetch","json","response","currenciesArray","Object","keys","filter","moeda","data","saveCashAction","WalletForm","editTask","confirmTask","addTask","fetTask","description","method","tag","idToEdit","map","obj","idTask","saveTaskData","prevState","currencyy","editor","coin","key","currencies","idTasking","saveTaskDataAction","deleteTaskAction","editTaskAction","Table","bringCoinName","dispesa","find","bringCambio","bringValorConvertido","deleteTaskBtn","newExpenses","editTaskBtn","editCall","lenght","editCallAction","Wallet","React","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f1686996.chunk.js","sourcesContent":["export const SAVE_USER = 'SAVE_USER';\nexport const SAVE_WALLET = 'SAVE_WALLET';\nexport const SAVE_TASK = 'SAVE_TASK';\nexport const SAVE_CASH = 'SAVE_CASH';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const EDIT_CALL = 'EDIT_CALL';\nexport const EDIT_TASK = 'EDIT_TASK';\n// USER REDUCER\n\nexport const saveUserData = (email) => ({\n  type: SAVE_USER,\n  email,\n});\n\n// WALLET REDUCER\n\nexport const getCurrenciesData = (data) => ({\n  type: SAVE_WALLET,\n  data,\n});\n\nexport const saveTaskData = (task) => ({\n  type: SAVE_TASK,\n  task,\n});\n\nexport const saveCash = (cash) => ({\n  type: SAVE_CASH,\n  cash,\n});\n\nexport const deleteTask = (task) => ({\n  type: DELETE_TASK,\n  task,\n});\n\nexport const editCall = (id) => ({\n  type: EDIT_CALL,\n  id,\n});\n\nexport const editTask = (task) => ({\n  type: EDIT_TASK,\n  task,\n});\n\nexport const getCurrencies = () => async (dispatch) => {\n  try {\n    const response = await (await fetch('https://economia.awesomeapi.com.br/json/all')).json();\n    const currenciesArray = Object.keys(response).filter((moeda) => moeda !== 'USDT');\n    dispatch(getCurrenciesData(currenciesArray));\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { saveUserData as saveUserDataAction } from '../redux/actions/index';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n      valid: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleClick = () => {\n    const { history, saveUser } = this.props;\n    const { email } = this.state;\n    saveUser(email);\n    history.push('/carteira');\n  }\n\n  validate = () => {\n    const { email, password } = this.state;\n    const pswd = password.split('');\n    const SIX = 6;\n    console.log(pswd);\n    if (/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(email) && pswd.length >= SIX) {\n      return (true);\n    }\n    return (false);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value }, () => {\n      this.setState({ valid: this.validate() });\n    });\n  }\n\n  render() {\n    const { email, password, valid } = this.state;\n    return (\n      <div id=\"login\">\n        <form className=\"card\">\n          <div className=\"card-header\">\n            <h2>Login</h2>\n          </div>\n          <div className=\"card-content\">\n            <label htmlFor=\"email\">\n              e-mail:\n              <input\n                type=\"email\"\n                name=\"email\"\n                data-testid=\"email-input\"\n                placeholder=\"e-mail\"\n                value={ email }\n                onChange={ this.handleChange }\n                required\n              />\n            </label>\n\n            <label htmlFor=\"password\">\n              senha:\n              <input\n                type=\"password\"\n                name=\"password\"\n                data-testid=\"password-input\"\n                placeholder=\"senha\"\n                minLength={ 6 }\n                value={ password }\n                onChange={ this.handleChange }\n                required\n              />\n            </label>\n\n            <button\n              id=\"btn-submit\"\n              type=\"button\"\n              onClick={ this.handleClick }\n              disabled={ !valid }\n            >\n              Entrar\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveUser: (email) => (\n    dispatch(saveUserDataAction(email))\n  ),\n});\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  saveUser: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { getCurrencies as getCurrenciesAction,\n  saveCash as saveCashAction } from '../redux/actions/index';\n\nclass Header extends Component {\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  componentDidUpdate() {\n    this.renderCash();\n  }\n\n  renderCash = () => {\n    const { expenses, saveCash } = this.props;\n    const valuees = [];\n    if (expenses.length === 0) saveCash(0);\n    else {\n      expenses.forEach((item) => {\n        const { currency, value, exchangeRates } = item;\n        const mult = exchangeRates[currency].ask;\n        const valueTratado = (value * mult).toFixed(2);\n        valuees.push(valueTratado);\n      });\n      const sum = valuees.reduce((partialSum, a) => Number(partialSum) + Number(a));\n      saveCash(sum);\n    }\n  }\n\n  render() {\n    const { email, cash } = this.props;\n    return (\n      <header>\n        <div className=\"heading\">\n          <span\n            data-testid=\"email-field\"\n          >\n            {email}\n          </span>\n          <span data-testid=\"total-field\">\n            { Number(cash).toFixed(2) }\n          </span>\n          <span data-testid=\"header-currency-field\">\n            BRL\n          </span>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n  cash: state.wallet.cash,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: () => dispatch(getCurrenciesAction()),\n  saveCash: (cash) => dispatch(saveCashAction(cash)),\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  getCurrencies: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(Object).isRequired,\n  saveCash: PropTypes.func.isRequired,\n  cash: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { saveTaskData as saveTaskDataAction,\n  deleteTask as deleteTaskAction,\n  editTask as editTaskAction } from '../redux/actions/index';\n\nclass WalletForm extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      description: '',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      currency: 'USD',\n      expenses: [],\n      exchangeRates: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.fetTask = this.fetTask.bind(this);\n  }\n\n  editTask = () => {\n    // const response = await (await fetch('https://economia.awesomeapi.com.br/json/all')).json();\n    this.confirmTask();\n  }\n\n  addTask = async () => {\n    const response = await (await fetch('https://economia.awesomeapi.com.br/json/all')).json();\n    // delete response.USDT;\n    this.setState({ exchangeRates: response }, () => this.fetTask());\n  }\n\n  confirmTask = () => {\n    const { value, description, method, tag, currency, exchangeRates } = this.state;\n    const { editTask, expenses, idToEdit } = this.props;\n    const newArr = expenses.map((obj) => {\n      if (obj.id === idToEdit) {\n        return { ...obj,\n          description,\n          value,\n          method,\n          tag,\n          currency,\n          exchangeRates };\n      }\n\n      return obj;\n    });\n    editTask(newArr);\n    this.setState({ value: '', description: '' });\n  }\n\n  fetTask = () => {\n    const { value, description, method, tag, currency, exchangeRates } = this.state;\n    const { idTask, saveTaskData } = this.props;\n    const data = {\n      id: idTask,\n      value,\n      description,\n      method,\n      tag,\n      currency,\n      exchangeRates,\n    };\n    saveTaskData(data);\n    this.setState((prevState) => ({\n      expenses: [...prevState.expenses, data],\n    }), () => this.setState({\n      value: '',\n      description: '',\n    }));\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { currencyy, editor } = this.props;\n    const { value, description, method, tag, currency } = this.state;\n    return (\n      <div className=\"wallet-form\">\n        <label htmlFor=\"value\">\n          Valor:\n          {' '}\n          <input\n            data-testid=\"value-input\"\n            type=\"number\"\n            name=\"value\"\n            onChange={ this.handleChange }\n            value={ value }\n          />\n        </label>\n\n        <label htmlFor=\"description\">\n          {' '}\n          Descrição:\n          {' '}\n          <input\n            data-testid=\"description-input\"\n            type=\"text\"\n            name=\"description\"\n            onChange={ this.handleChange }\n            value={ description }\n          />\n        </label>\n        <label htmlFor=\"currency\">\n          {' '}\n          Moeda:\n          {' '}\n          <select\n            data-testid=\"currency-input\"\n            name=\"currency\"\n            onChange={ this.handleChange }\n            value={ currency }\n          >\n            {currencyy.map((coin) => (\n              <option key={ coin } value={ coin }>{coin}</option>\n            ))}\n          </select>\n        </label>\n\n        <label htmlFor=\"method\">\n          {' '}\n          Pagamento:\n          {' '}\n          <select\n            data-testid=\"method-input\"\n            name=\"method\"\n            value={ method }\n            onChange={ this.handleChange }\n          >\n            <option value=\"Dinheiro\"> Dinheiro </option>\n            <option value=\"Cartão de crédito\"> Cartão de crédito </option>\n            <option value=\"Cartão de débito\"> Cartão de débito </option>\n          </select>\n        </label>\n\n        <label htmlFor=\"tag\">\n          {' '}\n          Categoria:\n          {' '}\n          <select\n            data-testid=\"tag-input\"\n            name=\"tag\"\n            value={ tag }\n            onChange={ this.handleChange }\n          >\n            <option value=\"Alimentação\"> Alimentação </option>\n            <option value=\"Lazer\"> Lazer </option>\n            <option value=\"Trabalho\"> Trabalho </option>\n            <option value=\"Transporte\"> Transporte </option>\n            <option value=\"Saúde\"> Saúde </option>\n          </select>\n        </label>\n        { editor ? (\n          <button\n            type=\"button\"\n            onClick={ this.editTask }\n          >\n            Editar despesa\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            onClick={ this.addTask }\n          >\n            Adicionar despesa\n          </button>\n        ) }\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencyy: state.wallet.currencies,\n  idTask: state.wallet.idTasking,\n  editor: state.wallet.editor,\n  idToEdit: state.wallet.idToEdit,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveTaskData: (task) => dispatch(saveTaskDataAction(task)),\n  deleteTask: (task) => dispatch(deleteTaskAction(task)),\n  editTask: (task) => dispatch(editTaskAction(task)),\n});\n\nWalletForm.propTypes = {\n  currencyy: PropTypes.arrayOf(PropTypes.string).isRequired,\n  idTask: PropTypes.number.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  saveTaskData: PropTypes.func.isRequired,\n  editor: PropTypes.bool.isRequired,\n  editTask: PropTypes.func.isRequired,\n  idToEdit: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { deleteTask as deleteTaskAction,\n  editCall as editCallAction } from '../redux/actions/index';\n\nclass Table extends Component {\n  bringCoinName = (id) => {\n    const { expenses } = this.props;\n    const dispesa = expenses.find((item) => item.id === id);\n    const moeda = dispesa.currency;\n    return dispesa.exchangeRates[moeda].name;\n  }\n\n  bringCambio = (id) => {\n    const { expenses } = this.props;\n    const dispesa = expenses.find((item) => item.id === id);\n    const moeda = dispesa.currency;\n    const cambio = Number(dispesa.exchangeRates[moeda].ask);\n    return cambio.toFixed(2);\n  }\n\n  bringValorConvertido = (id) => {\n    const { expenses } = this.props;\n    const dispesa = expenses.find((item) => item.id === id);\n    const moeda = dispesa.currency;\n    const valor = Number(dispesa.value);\n    const cambio = Number(dispesa.exchangeRates[moeda].ask);\n    return (valor * cambio).toFixed(2);\n  }\n\n  deleteTaskBtn = ({ target }) => {\n    const { expenses, deleteTask } = this.props;\n    const newExpenses = expenses.filter((item) => item.id !== Number(target.id));\n    // console.log(newExpenses);\n    if (newExpenses.length === 0) deleteTask([]);\n    else deleteTask(newExpenses);\n  }\n\n  editTaskBtn = ({ target }) => {\n    const { editCall } = this.props;\n    editCall(Number(target.id));\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table className=\"table\">\n        <thead>\n          <tr className=\"table-first-row\">\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir.</th>\n          </tr>\n        </thead>\n        <tbody>\n          { expenses.lenght !== 0 && (\n            expenses.map((dispesa) => (\n              <tr key={ dispesa.id }>\n                <td>\n                  {dispesa.description}\n                </td>\n                <td>\n                  {dispesa.tag}\n                </td>\n                <td>\n                  {dispesa.method}\n                </td>\n                <td>\n                  {Number(dispesa.value).toFixed(2)}\n                </td>\n                <td>\n                  {this.bringCoinName(dispesa.id)}\n                </td>\n                <td>\n                  {this.bringCambio(dispesa.id)}\n                </td>\n                <td>\n                  {this.bringValorConvertido(dispesa.id)}\n                </td>\n                <td>\n                  Real\n                </td>\n                <td>\n                  <button\n                    id={ dispesa.id }\n                    data-testid=\"delete-btn\"\n                    type=\"button\"\n                    onClick={ this.deleteTaskBtn }\n                  >\n                    excluir\n                  </button>\n                  <button\n                    id={ dispesa.id }\n                    data-testid=\"edit-btn\"\n                    type=\"button\"\n                    onClick={ this.editTaskBtn }\n                  >\n                    editar\n                  </button>\n                </td>\n              </tr>\n            ))\n          )}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteTask: (task) => dispatch(deleteTaskAction(task)),\n  editCall: (id) => dispatch(editCallAction(id)),\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  editCall: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\n\nimport Header from '../components/Header';\nimport WalletForm from '../components/WalletForm';\nimport Table from '../components/Table';\n\nexport default class Wallet extends React.Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <WalletForm />\n        <Table />\n      </>\n    );\n  }\n}\n","import { SAVE_USER } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_USER:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import { SAVE_WALLET, SAVE_TASK, SAVE_CASH, DELETE_TASK, EDIT_CALL,\n  EDIT_TASK } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [], // array de string\n  expenses: [], // array de objetos, com cada objeto tendo as chaves id, value, currency, method, tag, description e exchangeRates\n  editor: false, // valor booleano que indica de uma despesa está sendo editada\n  idToEdit: 0,\n  cash: 0, // valor numérico que armazena o id da despesa que esta sendo editada\n  idTasking: 0,\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_WALLET:\n    return {\n      ...state,\n      currencies: action.data,\n    };\n  case SAVE_TASK:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.task],\n      idTasking: state.idTasking + 1,\n    };\n  case SAVE_CASH:\n    return {\n      ...state,\n      cash: Number(action.cash),\n    };\n  case DELETE_TASK:\n    return {\n      ...state,\n      expenses: action.task,\n    };\n  case EDIT_CALL:\n    return {\n      ...state,\n      editor: true,\n      idToEdit: action.id,\n    };\n  case EDIT_TASK:\n    return {\n      ...state,\n      expenses: action.task,\n      editor: false,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\n\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport store from './redux/store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={ store }>\n        <Switch>\n          <Route exact path=\"/\" component={ Login } />\n          <Route exact path=\"/carteira\" component={ Wallet } />\n        </Switch>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}